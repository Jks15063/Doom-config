#+TITLE: Doom Emacs Configuration
#+AUTHOR: torkable
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+HTML_HEAD: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>
#+OPTIONS: \n:t
#+STARTUP: overview
* Info
Here are some additional functions/macros that could help you configure Doom:

- ~load!~ for loading external *.el files relative to this one
- ~use-package~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  ~require~ or `use-package'.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press ~K~ (non-evil users must press ~C-c g k~).
This will open documentation for it, including demos of how they are used.

You can also try ~gd~ (or ~C-c g d~) to jump to their definition and see how
they are implemented.

** Enabling Literate Config Mode
1. Uncomment ~literate~ under ~:config~ in ~init.el~
2. Create a ~config.org~ file (like this one) in your Doom dir
3. Run ~bin/doom refresh~

* Basic Config
Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).

#+BEGIN_SRC emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

Place your private configuration here! Remember, you do not need to run ~doom
sync~ after modifying this file!

** Visual Settings
*** Font
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ ~doom-font~
+ ~doom-variable-pitch-font~
+ ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka" :size 16))
#+end_src

*** Theme
Non-doom themes can be added in packages

#+begin_src emacs-lisp
(setq doom-theme 'doom-nord)
#+end_src

*** Line numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

*** Rainbow Identifiers
Rainbow identifiers in all prog modes

#+begin_src emacs-lisp
(add-hook! prog-mode #'rainbow-identifiers-mode)
#+end_src

** Keybinds
*** Local leader key
Set local leader key to ~,~

#+BEGIN_SRC emacs-lisp
(setq doom-localleader-key ",")
#+END_SRC

*** Avy and surround setup
For the last few years on ~spacemacs~, I had moved surround to =S= and had
~avy-goto-char-timer~ set to =s=. But by default, Doom emacs replaces =s= and
=S= with ~evil snipe~, which is similar, but not what I want, so lets turn it
off:
#+BEGIN_SRC emacs-lisp
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)
#+END_SRC

Map ~avy-goto-char-timer~ to =s= and ~avy-goto-line~ to =C-;=:
#+BEGIN_SRC emacs-lisp
(evil-define-key '(normal motion) global-map "s" 'avy-goto-char-timer)
(evil-define-key '(visual operator) evil-surround-mode-map "s" 'avy-goto-char-timer)
(evil-define-key '(normal motion visual operator) global-map (kbd "C-;") 'avy-goto-line)
#+END_SRC

And move surround to =S=:
#+BEGIN_SRC emacs-lisp
(evil-define-key 'operator evil-surround-mode-map "S" 'evil-surround-edit)
(evil-define-key 'visual evil-surround-mode-map "S" 'evil-surround-region)
#+END_SRC

*** Bind newline command
#+BEGIN_SRC emacs-lisp
(map! :leader "j n" #'sp-newline)
#+END_SRC

*** Maximize frame
#+begin_src emacs-lisp
(map! :leader "w m f" #'toggle-frame-maximized)
#+end_src

*** Bind SQL-connect
Connect to one of the db connections defined in ~sql-connection-alist~

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "SQL Connections"
      "o s" #'sql-connect)
#+END_SRC

*** Bind restclient functions so they're easy to use with babel
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("R" . "restclient")
      :desc "send current"
      "s" #'restclient-http-send-current))
#+end_src

** Misc QoL settings
*** Unordered escape key sequence
So I can just mash ~jk~ without thinking

#+BEGIN_SRC emacs-lisp
(setq evil-escape-unordered-key-sequence t)
#+END_SRC

*** Global word wrap
#+BEGIN_SRC emacs-lisp :tangle no
(+global-word-wrap-mode +1)
#+END_SRC

*** Treat underscore as a word character
#+BEGIN_SRC emacs-lisp
;; For elixir
(add-hook! 'elixir-mode-hook (modify-syntax-entry ?_ "w"))
#+END_SRC

** Cars.com
*** Env vars
#+begin_src emacs-lisp
(setenv "AWS_PROFILE" "cars-beta-np-118439772188-developer")
(setenv "AWS_SDK_LOAD_CONFIG" "1")
#+end_src

* Mode Config
** Org mode config
*** Directory Setup
**** Org directory
Set the base org mode directory

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org/gtd/")
#+END_SRC

**** GTD agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Dropbox/org/gtd/inbox.org"
                         "~/Dropbox/org/gtd/gtd.org"
                         "~/Dropbox/org/gtd/cars.org"
                         "~/Dropbox/org/gtd/tickler.org"))
#+END_SRC

**** Refile targets
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '(("~/Dropbox/org/gtd/gtd.org" :maxlevel . 3)
                           ("~/Dropbox/org/gtd/someday.org" :level . 1)
                           ("~/Dropbox/org/gtd/cars.org" :level . 1)
                           ("~/Dropbox/org/gtd/tickler.org" :maxlevel . 2)))
#+END_SRC

Allow the creation of new parent nodes while refiling. This means “allow me to
tack new heading names onto the end of my outline path, and if I am asking to
create new ones, make me confirm it.”
#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

**** Diary Settings
Set the diary file, exclude it from our agenda, and insert timestamps on creation.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-diary-file "~/Dropbox/org/gtd/diary.org")
(setq org-agenda-include-diary nil)
(setq org-agenda-insert-diary-extract-time t)
#+END_SRC

*** Visual Settings
**** Set checkbox statistics face to orange
The pure red is a bit much, still need to lower the brightness though

#+BEGIN_SRC emacs-lisp
(after! org
  (set-face-attribute 'org-checkbox-statistics-todo nil :background "#FF5722"))
#+END_SRC

**** Set done todo face to grey
They are grey by default in Doom emacs, but somewhere, somehow, they got set to orange.

#+BEGIN_SRC emacs-lisp
(after! org
  (set-face-attribute 'org-headline-done nil :foreground "grey"))
#+END_SRC

**** Todo Keyword Face Colors
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "#FF5722" :weight bold)
                ;; ("NEXT" :foreground "#2196F3" :weight bold)
                ("DONE" :foreground "#4CAF50" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ;; ("HOLD" :foreground "#E040FB" :weight bold)
                ("CANCELLED" :foreground "#4CAF50" :weight bold)))))
#+END_SRC

**** Inline images on load
not working, add ~#+STARTUP: inlineimages~ to org file
#+BEGIN_SRC emacs-lisp :tangle no
(after! org
  (setq org-startup-with-inline-images t))
#+END_SRC

*** GTD and Agenda Settings
**** Todo Keywords
Set up todo keyword workflow

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w@)" "|" "DONE(d)" "CANCELLED(c@)"))))
#+END_SRC
**** Capture Templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates '(("t" "Todo [inbox]" entry (file+headline "~/Dropbox/org/gtd/inbox.org" "Tasks") "* TODO %i%?\n")
                                ("T" "Tickler" entry (file+headline "~/Dropbox/org/gtd/tickler.org" "Tickler") "* %i%? \n %U")
                                ("j" "Journal" entry (file+datetree "~/Dropbox/org/gtd/diary.org") "* %?\n%U\n")
                                ("h" "habit" entry (file "~/Dropbox/org/gtd/inbox.org")
                                 "* TODO %?\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit \n:END:\n%U\n")
                                ("n" "Note" entry (file+headline "~/Dropbox/org/gtd/inbox.org" "Notes") "* %? :NOTE:\n%U\n"))))
#+END_SRC

**** Ignore scheduled headlines and deadlines in the global todo list
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-todo-ignore-deadlines t))
#+END_SRC

*** Turn off autocomplete
#+begin_src emacs-lisp
(remove-hook 'org-mode-hook #'auto-fill-mode)
#+end_src
** SQL mode config
*** Cars.com db connections
**** Define connections
If I don't pass in a password, emacs asks for a password twice. First password
doesn't seem to matter, so pass in empty string here and then it only asks once.

The NP connection works but I have to enter the password each time.
#+BEGIN_SRC emacs-lisp
(setq sql-connection-alist
      '(("local" (sql-product 'postgres)
         (sql-database "engine_dev")
         (sql-user "postgres")
         (sql-server "0.0.0.0")
         (sql-password ""))
        ("cars_NP" (sql-product 'postgres)
         (sql-database "cars_platform")
         (sql-user "cars_platform")
         (sql-server "cars-platform-np-11-b.cluster-ro-cqjdh8pomb3b.us-east-1.rds.amazonaws.com")
         (sql-password ""))))
#+END_SRC

**** Connect to NP using ~pg-passwords.el.gpg~
WIP: Following along with https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client
#+BEGIN_SRC emacs-lisp :tangle no
(defun pg-local ()
  (interactive)
  (pg-sql-connect 'postgres 'local))

(defun pg-sql-connect (product connection)
  ;; load the password
  (require '~/pg-passwords.el.gpg)

  ;; update the password to the sql-connection-alist
  (let ((connection-info (assoc connection sql-connection-alist))
        (sql-password (car (last (assoc connection pg-sql-password)))))
    (delete sql-password connection-info)
    (nconc connection-info `((sql-password ,sql-password)))
    (setq sql-connection-alist (assq-delete-all connection sql-connection-alist))
    (add-to-list 'sql-connection-alist connection-info))

  ;; connect to database
  (setq sql-product product)
  (sql-connect connection))
#+END_SRC

**** Prod

#+BEGIN_SRC emacs-lisp :tangle no
(defun cars-prod-db-read-only ()
  (interactive)
  (message "Hello world!"))
#+END_SRC

** Org-books config
#+BEGIN_SRC emacs-lisp
(setq org-books-file "~/Dropbox/org/gtd/book-list.org")
#+END_SRC

** Copilot config
#+begin_src emacs-lisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map copilot-completion-map
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)))
#+end_src
** SQL formatter
#+begin_src emacs-lisp
(setq sqlformat-command 'pgformatter)
(setq sqlformat-args '("-s2" "-g"))
#+end_src

** Elxir mode perf workaround
#+begin_src emacs-lisp
(add-to-list 'doom-detect-indentation-excluded-modes 'elixir-mode)
#+end_src
** tree-sitter
*** disable syntax highlighting
It overwrites rainbow indentifiers, which is terrible

#+begin_src emacs-lisp
(setq +tree-sitter-hl-enabled-modes nil)
#+end_src

** Everywhere
#+begin_src emacs-lisp
;; (setq emacs-everywhere-markdown-apps '("Google Chrome"))
;; (setq emacs-everywhere-markdown-windows '("Pull Request"))
(setq emacs-everywhere-major-mode-function #'markdown-mode)
#+end_src
